@model Address

@{
    ViewData["Title"] = "Adres Düzenle";
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - SendeAl.com</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <style>
        /* CSS kodunuzun tamamı burada kalacak */
        :root {
            --primary-orange: #ff6b35;
            --secondary-orange: #ff8c42;
            --light-orange: #fff4f0;
            --dark-orange: #e55a2b;
            --text-dark: #2c3e50;
            --text-light: #6c757d;
            --white: #ffffff;
            --border-light: #e9ecef;
            --shadow: rgba(255, 107, 53, 0.15);
            --success-green: #28a745;
        }

        body {
            background: linear-gradient(135deg, #f8f9fa 0%, var(--light-orange) 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        /* Başlık Tasarımı */
        .display-4 {
            background: linear-gradient(45deg, var(--primary-orange), var(--secondary-orange));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 800;
            margin-bottom: 2rem;
            position: relative;
        }

            .display-4::after {
                content: '';
                position: absolute;
                bottom: -10px;
                left: 50%;
                transform: translateX(-50%);
                width: 80px;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-orange), var(--secondary-orange));
                border-radius: 2px;
            }

        /* Form Container */
        .form-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-light);
            padding: 40px;
            margin-bottom: 30px;
            transition: all 0.3s ease;
            animation: slideInLeft 0.8s ease forwards;
            opacity: 0;
            transform: translateX(-50px);
        }

            .form-container:hover {
                box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
            }

            .form-container h2 {
                color: var(--text-dark);
                font-weight: 700;
                margin-bottom: 30px;
                position: relative;
                display: flex;
                align-items: center;
                gap: 12px;
            }

                .form-container h2::after {
                    content: '';
                    flex: 1;
                    height: 3px;
                    background: linear-gradient(90deg, var(--primary-orange), var(--secondary-orange));
                    border-radius: 2px;
                }

        /* Form Elemanları */
        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-control,
        .form-select {
            border: 2px solid var(--border-light);
            border-radius: 12px;
            padding: 15px 18px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

            .form-control:focus,
            .form-select:focus {
                border-color: var(--primary-orange);
                box-shadow: 0 0 0 0.25rem rgba(255, 107, 53, 0.15);
                background: white;
            }

            .form-control:hover,
            .form-select:hover {
                border-color: var(--secondary-orange);
            }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        /* Checkbox Tasarımı */
        .form-check {
            background: var(--light-orange);
            border-radius: 12px;
            padding: 15px 20px;
            border: 2px solid var(--border-light);
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }

            .form-check:hover {
                border-color: var(--secondary-orange);
                background: rgba(255, 107, 53, 0.05);
            }

        .form-check-input:checked {
            background-color: var(--primary-orange);
            border-color: var(--primary-orange);
        }

        .form-check-input:focus {
            border-color: var(--secondary-orange);
            box-shadow: 0 0 0 0.25rem rgba(255, 107, 53, 0.25);
        }

        .form-check-label {
            font-weight: 600;
            color: var(--text-dark);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Buton Tasarımı */
        .btn-primary {
            background: linear-gradient(45deg, var(--primary-orange), var(--secondary-orange)) !important;
            border: none;
            border-radius: 25px;
            padding: 15px 35px;
            font-weight: 700;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            width: 100%;
            margin-top: 20px;
        }

            .btn-primary::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                transition: left 0.5s ease;
            }

            .btn-primary:hover::before {
                left: 100%;
            }

            .btn-primary:hover {
                background: linear-gradient(45deg, var(--dark-orange), var(--primary-orange)) !important;
                transform: translateY(-3px);
                box-shadow: 0 10px 30px rgba(255, 107, 53, 0.4);
            }

        /* Harita Container */
        .map-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-light);
            overflow: hidden;
            animation: slideInRight 0.8s ease forwards;
            opacity: 0;
            transform: translateX(50px);
            animation-delay: 0.3s;
            position: sticky;
            top: 20px;
            height: fit-content;
        }

        .map-header {
            background: linear-gradient(135deg, var(--primary-orange), var(--secondary-orange));
            color: white;
            padding: 20px 25px;
            font-weight: 700;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        #map {
            width: 100%;
            height: 400px;
            border: none;
        }

        .map-info {
            padding: 20px 25px;
            background: var(--light-orange);
            color: var(--text-dark);
            font-size: 0.9rem;
            text-align: center;
        }

        /* Validation Mesajları */
        .text-danger {
            color: #dc3545 !important;
            font-size: 0.875rem;
            font-weight: 500;
            margin-top: 5px;
        }

        .validation-summary-errors {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            border: 2px solid #dc3545;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 25px;
            color: #721c24;
        }

            .validation-summary-errors ul {
                margin-bottom: 0;
                padding-left: 20px;
            }

        /* Responsive Tasarım */
        @@media (max-width: 992px) {
            .map-container {
                position: static;
                margin-top: 30px;
            }

            #map {
                height: 300px;
            }
        }

        @@media (max-width: 768px) {
            .form-container {
                padding: 25px;
                margin-bottom: 20px;
            }

                .form-container h2 {
                    font-size: 1.5rem;
                    flex-direction: column;
                    text-align: center;
                }

                    .form-container h2::after {
                        width: 80px;
                        height: 3px;
                    }

            .form-control,
            .form-select {
                padding: 12px 15px;
            }

            .btn-primary {
                padding: 12px 25px;
                font-size: 1rem;
            }

            #map {
                height: 250px;
            }
        }

        @@media (max-width: 576px) {
            .form-container {
                padding: 20px;
                border-radius: 15px;
            }

            .display-4 {
                font-size: 2rem;
            }

            .form-check {
                padding: 12px 15px;
            }
        }

        /* Animasyon Tanımları */
        @@keyframes slideInLeft {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes slideInRight {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* Loading Spinner */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--light-orange);
            border-top: 4px solid var(--primary-orange);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <section class="container my-5">
        <div class="text-center">
            <h1 class="display-4">@ViewData["Title"]</h1>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="form-container">
                    <h2>
                        <i class="bi bi-geo-alt-fill"></i>
                        Adres Bilgileri
                    </h2>

                    <form asp-action="Edit" id="addressForm">
                        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="AddressGuid" />
                        <input type="hidden" asp-for="CreateDate" />
                        <input type="hidden" name="Latitude" id="Latitude" />
                        <input type="hidden" name="Longitude" id="Longitude" />
                        <div class="form-group">
                            <label asp-for="Title" class="form-label">
                                <i class="bi bi-building-fill"></i>
                                Adres Başlığı
                            </label>
                            <input asp-for="Title" class="form-control" placeholder="Örn: Ev, İş, vs." />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="City" class="form-label">
                                <i class="bi bi-buildings-fill"></i>
                                Şehir
                            </label>
                            <input asp-for="City" class="form-control" placeholder="Şehir adını girin" />
                            <span asp-validation-for="City" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="District" class="form-label">
                                <i class="bi bi-map-fill"></i>
                                İlçe
                            </label>
                            <input asp-for="District" class="form-control" placeholder="İlçe adını girin" />
                            <span asp-validation-for="District" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="OpenAddress" class="form-label">
                                <i class="bi bi-house-fill"></i>
                                Açık Adres
                            </label>
                            <textarea asp-for="OpenAddress" class="form-control" placeholder="Mahalle, sokak, numara ve diğer detayları yazın..."></textarea>
                            <span asp-validation-for="OpenAddress" class="text-danger"></span>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="IsActive" id="isActive" />
                            <label class="form-check-label" for="isActive">
                                <i class="bi bi-check-circle"></i>
                                Aktif Adres
                            </label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="IsBillingAddress" id="isBilling" />
                            <label class="form-check-label" for="isBilling">
                                <i class="bi bi-receipt"></i>
                                Fatura Adresi Olarak Kullan
                            </label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="IsDeliveryAddress" id="isDelivery" />
                            <label class="form-check-label" for="isDelivery">
                                <i class="bi bi-truck"></i>
                                Teslimat Adresi Olarak Kullan
                            </label>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save me-2"></i>
                                Adresi Kaydet
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="map-container">
                    <div class="map-header">
                        <i class="bi bi-geo-alt"></i>
                        Haritadan Konumu Değiştirin
                    </div>
                    <div id="map"></div>
                    <div class="map-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Haritada tıklayarak kesin konumunuzu belirleyebilirsiniz
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let map;
        let marker;

        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            setupFormEvents();
        });

        async function initMap() {
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                console.error("Harita div'i (id='map') bulunamadı.");
                return;
            }

            try {
                // ViewBag'den gelen değerleri alıyoruz, bunlar modelde olmadığı için bu şekilde erişiyoruz.
                // Eğer ViewBag'den değer gelmezse varsayılan bir konuma ayarlanır.
                const initialLat = parseFloat('@Html.Raw(Json.Serialize(ViewBag.InitialLatitude))') || 41.0082;
                const initialLng = parseFloat('@Html.Raw(Json.Serialize(ViewBag.InitialLongitude))') || 28.9784;
                const initialLocation = [initialLat, initialLng];

                map = L.map('map', {
                    center: initialLocation,
                    zoom: 13,
                    zoomControl: true,
                    scrollWheelZoom: true
                });

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                const customIcon = L.divIcon({
                    className: 'custom-marker',
                    html: `<div style="
                        background: linear-gradient(135deg, #ff6b35, #ff8c42);
                        width: 30px;
                        height: 30px;
                        border-radius: 50% 50% 50% 0;
                        border: 3px solid white;
                        box-shadow: 0 3px 10px rgba(255, 107, 53, 0.5);
                        transform: rotate(-45deg);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    ">
                        <i class="bi bi-geo-alt-fill" style="
                            color: white;
                            transform: rotate(45deg);
                            font-size: 14px;
                        "></i>
                    </div>`,
                    iconSize: [30, 30],
                    iconAnchor: [15, 30]
                });

                marker = L.marker(initialLocation, {
                    icon: customIcon,
                    draggable: true
                }).addTo(map);

                // Gizli input alanlarına başlangıç değerlerini atama
                document.getElementById('Latitude').value = initialLat;
                document.getElementById('Longitude').value = initialLng;

                map.on('click', function(e) {
                    placeMarker(e.latlng);
                    updateAddressFromCoords(e.latlng.lat, e.latlng.lng);
                });

                marker.on('dragend', function(e) {
                    const position = e.target.getLatLng();
                    updateAddressFromCoords(position.lat, position.lng);
                });

                setTimeout(() => {
                    map.invalidateSize();
                }, 400);

            } catch (error) {
                console.error("Harita başlatılırken bir hata oluştu:", error);
            }
        }

        function placeMarker(location) {
            if (marker) {
                marker.setLatLng(location);
                const markerElement = marker.getElement();
                if (markerElement) {
                    markerElement.style.transform += ' scale(1.2)';
                    setTimeout(() => {
                        markerElement.style.transform = markerElement.style.transform.replace(' scale(1.2)', '');
                    }, 200);
                }
                document.getElementById('Latitude').value = location.lat;
                document.getElementById('Longitude').value = location.lng;
            }
        }

        async function updateAddressFromCoords(lat, lng) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1&accept-language=tr`);
                const data = await response.json();

                if (data && data.address) {
                    const address = data.address;
                    const city = address.province || address.state || address.city || '';
                    if (city && document.getElementById("City")) {
                        document.getElementById("City").value = city;
                        animateInput(document.getElementById("City"));
                    }
                    const district = address.county || address.town || address.district || '';
                    if (district && document.getElementById("District")) {
                        document.getElementById("District").value = district;
                        animateInput(document.getElementById("District"));
                    }
                    const openAddress = data.display_name || '';
                    if (openAddress && document.getElementById("OpenAddress")) {
                        document.getElementById("OpenAddress").value = openAddress;
                        animateInput(document.getElementById("OpenAddress"));
                    }
                    showNotification('Adres bilgileri haritadan otomatik olarak güncellendi!', 'success');
                }
            } catch (error) {
                console.error('Adres bilgisi alınamadı:', error);
                showNotification('Adres bilgisi alınırken hata oluştu.', 'error');
            }
        }

        function animateInput(input) {
            input.style.transform = 'scale(1.02)';
            input.style.borderColor = '#ff6b35';
            setTimeout(() => {
                input.style.transform = 'scale(1)';
                input.style.borderColor = '';
            }, 300);
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            notification.style.cssText = `
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
                border-radius: 12px;
                border: none;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            `;
            notification.innerHTML = `<i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>${message}`;
            document.body.appendChild(notification);
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 100);
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        function setupFormEvents() {
            const addressForm = document.getElementById('addressForm');
            if (addressForm) {
                addressForm.addEventListener('submit', function(e) {
                    const submitBtn = this.querySelector('button[type="submit"]');
                    submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Kaydediliyor...';
                    submitBtn.disabled = true;
                    document.getElementById('loadingOverlay').style.display = 'flex';
                });
            }
            const formInputs = document.querySelectorAll('.form-control');
            formInputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.style.transform = 'scale(1.02)';
                });
                input.addEventListener('blur', function() {
                    this.parentElement.style.transform = 'scale(1)';
                });
            });
            const cityInput = document.getElementById('City');
            const districtInput = document.getElementById('District');
            if (cityInput) {
                cityInput.addEventListener('blur', updateMapFromAddress);
            }
            if (districtInput) {
                districtInput.addEventListener('blur', updateMapFromAddress);
            }
        }

        async function updateMapFromAddress() {
            const city = document.getElementById('City')?.value;
            const district = document.getElementById('District')?.value;
            if (city && district) {
                try {
                    const query = `${district}, ${city}, Turkey`;
                    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&countrycodes=tr&limit=1`);
                    const data = await response.json();
                    if (data && data.length > 0) {
                        const lat = parseFloat(data[0].lat);
                        const lon = parseFloat(data[0].lon);
                        map.setView([lat, lon], 13);
                        marker.setLatLng([lat, lon]);
                    }
                } catch (error) {
                    console.error('Adres aranırken hata:', error);
                }
            }
        }
    </script>
</body>
</html>